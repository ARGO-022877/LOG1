rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function hasValidTimestamp() {
      return request.resource.data.timestamp is timestamp;
    }
    
    // Developer profiles
    match /developers/{developerId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(developerId);
    }
    
    // Learning sessions
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && 
        (resource.data.developerId == request.auth.uid || 
         resource.data.public == true);
      allow create: if isAuthenticated() && 
        request.resource.data.developerId == request.auth.uid &&
        hasValidTimestamp();
      allow update: if isOwner(resource.data.developerId);
      allow delete: if isOwner(resource.data.developerId);
    }
    
    // Projects
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid in resource.data.members;
        
      // Commits subcollection
      match /commits/{commitId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members;
      }
    }
    
    // Knowledge graph snapshots
    match /knowledge/{knowledgeId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only writable by Cloud Functions
    }
    
    // AI recommendations
    match /recommendations/{recommendationId} {
      allow read: if isAuthenticated() && 
        resource.data.developerId == request.auth.uid;
      allow write: if false; // Only writable by Cloud Functions
    }
  }
}