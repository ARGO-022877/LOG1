rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf|text/.*|application/json') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImageFile();
    }
    
    // Project assets
    match /projects/{projectId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid in firestore.get(/databases/(default)/documents/projects/$(projectId)).data.members;
    }
    
    // Learning resources
    match /resources/{resourceId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidDocumentFile();
    }
    
    // Temporary uploads (auto-cleaned after 24 hours)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId);
    }
  }
}